InnoDB .ibd 数据修复

链接数据库
# mysql -h 127.0.0.1 -u root -p

#新建数据库
CREATE DATABASE sakila;

#进入新建的数据库
USE sakila;

#建与待修复表相同的表
CREATE TABLE actor (
   actor_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
   first_name VARCHAR(45) NOT NULL,
   last_name VARCHAR(45) NOT NULL,
   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
   PRIMARY KEY  (actor_id),
   KEY idx_actor_last_name (last_name)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

#将此表移出表空间
ALTER TABLE sakila.actor DISCARD TABLESPACE;

复制数据文件

cp /backup_directory/actor.ibd path/to/mariadb/data/sakila/

修改文件所有者和权限

chown -R mariadb:mariadb path/to/mariadb/data/sakila/actor.ibd
chmod -R 0660 path/to/mariadb/data/sakila/actor.ibd

重新将其导入表空间

ALTER TABLE sakila.actor IMPORT TABLESPACE;

如果一切正常，应该就可以对修复后的表进行查询操作了，将查询出的数据恢复到损坏的MySQL实例中即可。

cat /dev/null > /var/log/audit/audit.log
cat /dev/null > /var/log/boot.log
cat /dev/null > /var/log/secure
cat /dev/null > /var/log/messages
cat /dev/null > /var/log/lastlog
cat /dev/null > /var/log/btmp
cat /dev/null > /var/log/cron
cat /dev/null > /var/log/dmesg
cat /dev/null > /var/log/wtmp
cat /dev/null > /var/log/maillog
cat /dev/null > /var/log/yum.log
cat /dev/null > /var/log/tallylog

cd /tmp/
find . -name "sess_*" |xargs rm -r

chown -R www:www /home/WebHost/*
chmod -R 0755 /home/wwwroot/*

chmod +x /root/check502.sh
chmod +x /root/cut_nginx_logs.sh

crontab -u //设定某个用户的cron服务
crontab -l //列出某个用户cron服务的详细内容
crontab -r //删除某个用户的cron服务
crontab -e //编辑某个用户的cron服务
crontab -i //打印提示，输入yes等确认信息

    # For details see man 4 crontabs
    # Example of job definition:
    # .---------------- minute (0 - 59)
    # | .------------- hour (0 - 23)
    # | | .---------- day of month (1 - 31)
    # | | | .------- month (1 - 12) OR jan,feb,mar,apr ...
    # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
    # | | | | |
    # * * * * * user-name command to be executed
    定时任务的每段为：分，时，日，月，周，用户，命令
    第1列表示分钟1～59 每分钟用*或者 */1表示
    第2列表示小时1～23（0表示0点）
    第3列表示日期1～31
    第4列表示月份1～12
    第5列标识号星期0～6（0表示星期天）
    第6列要运行的命令

    *：表示任意时间都，实际上就是“每”的意思。可以代表00-23小时或者00-12每月或者00-59分
    -：表示区间，是一个范围，00 17-19 * * * cmd，就是每天17,18,19点的整点执行命令
    ,：是分割时段，30 3,19,21 * * * cmd，就是每天凌晨3和晚上19,21点的半点时刻执行命令
    /n：表示分割，可以看成除法，*/5 * * * * cmd，每隔五分钟执行一次

*/5 * * * * /bin/sh /root/check502.sh
* 1 * * * /bin/sh /root/cut_nginx_logs.sh

安装iptable iptable-service

#先检查是否安装了iptables
service iptables status
#安装iptables
yum install -y iptables
#升级iptables
yum update iptables 
#安装iptables-services
yum install iptables-services

禁用/停止自带的firewalld服务

#停止firewalld服务
systemctl stop firewalld
#禁用firewalld服务
systemctl mask firewalld

开启iptables服务 

#注册iptables服务
#相当于以前的chkconfig iptables on
systemctl enable iptables.service
#开启服务
systemctl start iptables.service
#查看状态
systemctl status iptables.service

解决vsftpd在iptables开启后,无法使用被动模式的问题

1.首先在/etc/sysconfig/iptables-config中修改或者添加以下内容

#最新系统可能需要加载一下ftp模块
modprobe ip_conntrack_ftp
modprobe ip_nat_ftp

#添加以下内容,注意顺序不能调换
IPTABLES_MODULES="ip_conntrack_ftp"
IPTABLES_MODULES="ip_nat_ftp"

vi /etc/sysconfig/iptables

# Generated by iptables-save v1.4.7 on Sun Mar 31 21:05:02 2019
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [1:52]
-A INPUT -i lo -j ACCEPT 
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT 
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT 
-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT 
-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT 
-A INPUT -s X.X.X.X -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT 
-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT 
-A INPUT -j REJECT --reject-with icmp-host-prohibited 
-A FORWARD -j REJECT --reject-with icmp-host-prohibited 
COMMIT
# Completed on Sun Mar 31 21:05:02 2019

#防火墙重启
systemctl restart iptables.service

主从MYSQL版本必须一致

配置 MySQL 主服务器 master
$sudo vi /etc/mysql/my.cnf
[mysqld]
server-id=1   #必须。设置服务器id，为1表示主服务器。规范为服务器IP的后段
log_bin=mysql-bin  #必须。启动MySQ二进制日志系统。
binlog-do-db=osyunweidb  #需要同步的数据库名，如果有多个数据库，可重复此参数，每个数据库一行。
binlog-ignore-db=mysql   #不同步mysql系统数据库。

配置 MySQL 从服务器 slave
$sudo vim /etc/mysql/my.cnf
[mysqld]
server-id=2   #必须。设置服务器id，为2表示从服务器。规范为服务器IP的后段
log_bin=mysql-bin  #不必须。启动MySQ二进制日志系统。
binlog-do-db=osyunweidb  #需要同步的数据库名，如果有多个数据库，可重复此参数，每个数据库一行。
binlog-ignore-db=mysql   #不同步mysql系统数据库。

授权主节点远程访问
# mysql -u root -p

mysql> GRANT REPLICATION SLAVE ON *.* TO 'slave_cms'@'从IP节点' IDENTIFIED BY 'h2tYXkL4sHXt6MVr' WITH GRANT OPTION;
mysql> SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;

mysql> FLUSH PRIVILEGES;
mysql> show master status;

#查看端口号
mysql> show global variables like 'port';

配置从节点供主节点访问
# mysql -u root -p
mysql> change master to master_host='主IP节点',master_user='slave_cms',master_password='h2tYXkL4sHXt6MVr',master_log_file='mysql-bin.000001',master_log_pos=120;
mysql> FLUSH PRIVILEGES;

mysql> start slave; 
mysql> show slave status\G

#停止slave同步进程
mysql> stop slave;
